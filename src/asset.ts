export default function normal() {
  return '{\n  "$schema": "http://json.schemastore.org/tsconfig", // Specify the schema for type checking and intellisense\n\n  "compilerOptions": {\n    "rootDir": "./src", // Where are .ts files stored\n    "outDir": "./bin", // Where will outputted files be stored\n    "paths": {\n      "~/*": ["./src/*"] // Specify that "~/path/to/file" will be quivalent to "./src/path/to/file"\n    },\n\n    "allowJs": true, // Allow the usage of javascript files\n    "allowSyntheticDefaultImports": true, // Import a default even when there isn\'t one\n    "allowUnreachableCode": false, // Throw an error if code can never be reached\n    "alwaysStrict": true, // Always write "use strict" in javascript files\n    "allowUmdGlobalAccess": true, // Allow using UMD globals without needing to specifically import them\n    "allowUnusedLabels": true, // Don\'t throw an error if a label isn\'t used\n    "assumeChangesOnlyAffectDirectDependencies": true, // Asume that a changed file will only have changes to files directly depending on it\n    "baseUrl": ".", // Make sure the base url is the current working directory\n    "checkJs": true, // Run type checking on javascript files\n    "composite": false, // Writes a tsconfig.tsbuildinfo file\n    "declarationDir": "./bin", // Where to write .d.ts files\n    "declarationMap": true, // Write .map files for declaration files\n    "diagnostics": false, // Log nerd stats\n    "disableReferencedProjectLoad": true, // Disable preloading of types for large multi-projects\n    "disableSizeLimit": false, // Remove the 20mb cap on total JS size\n    "disableSolutionSearching": false, // Opt out of finding solutions in multiple projects\n    "disableSourceOfProjectReferenceRedirect": true, // Disable preferring source files instead of declaration files\n    "declaration": true, // Write declaration files\n    "downlevelIteration": true, // Use more performant iteration\n    "esModuleInterop": true, // Allows support for CommonJS and ES Modules to interact\n    "emitBOM": false, // Write a Byte Order Mark at the beginning of files\n    "emitDeclarationOnly": false, // Only write .d.ts files\n    "emitDecoratorMetadata": true, // Write metadata about decorators in source files\n    "experimentalDecorators": true, // Use experimental decorators "@Whatever"\n    "extendedDiagnostics": false, // Write extra nerd stats\n    "exactOptionalPropertyTypes": true, // Differentiate between an optional type and undefined\n    "forceConsistentCasingInFileNames": true, // Force consistent casing in file names\n    "lib": ["Dom", "ESNext"], // Certain type libraries to include\n    "importHelpers": true, // Import helpers once per project instead of per-file\n    "importsNotUsedAsValues": "preserve", // Determines what method of type importing to use\n    "isolatedModules": true, // Make sure each file has an "import" or "export"\n    "incremental": false, // Writes a tsbuildinfo file for faster development\n    "inlineSourceMap": false, // Write source maps within JS files\n    "inlineSources": false, // Write source code withing JS map files\n    "jsx": "preserve", // Determines outputted React function component syntax\n    "jsxFactory": "React.createElement", // What method is called to create an element\n    "jsxFragmentFactory": "React.Fragment", // What method is called to create a fragment\n    "keyofStringsOnly": false, // Force keyof operator to only return strings\n    "listEmittedFiles": false, // Log all written files\n    "listFiles": false, // Log all files\n    "listFilesOnly": false, // Only list files instead of compiling\n    "maxNodeModuleJsDepth": 0, // Depth to type check node modules\n    "module": "esnext", // Determines what type of import system to use ("require", "import", etc.)\n    "moduleResolution": "node", // Specifies how to resolve modules\n    "noEmit": false, // Don\'t write any compiled JS\n    "noUncheckedIndexedAccess": true, // Disable index access without undefined possibility\n    "noFallthroughCasesInSwitch": true, // Enable error reporting for fallthrough cases in switch statements\n    "noImplicitAny": true, // Don\'t allow a token to be implicitly any\n    "noImplicitOverride": true, // Specifically write the word "override" before class properties if it overrides\n    "noImplicitReturns": true, // Always have a code path that returns\n    "noImplicitThis": true, // Don\'t allow "this" to implicitly be any\n    "noUnusedLocals": true, // Error when local variables aren\'t used\n    "noUnusedParameters": true, // Error when function parameters aren\'t used\n    "noErrorTruncation": true, // Don\'t shorten types in error messages\n    "preserveWatchOutput": false, // Preserve watch output\n    "pretty": true, // Make the terminal output look nicer\n    "removeComments": true, // Delete comments from output files\n    "resolveJsonModule": true, // Import .json files\n    "skipLibCheck": false, // Skip type checks on lib files\n    "strict": true, // All strict type checkings\n    "strictBindCallApply": true, // Check that the arguments for bind, call, and apply methods match the original function.\n    "strictFunctionTypes": true, // Make sure params and return types are compatible\n    "strictNullChecks": true, // Make sure null is not equal to undefined\n    "strictPropertyInitialization": true, // Make sure a property that isn\'t marked as optional gets initialized\n    "target": "es6", // Target ECMAScript version\n    "types": ["node"], // Lib files for the compiler\n    "typeRoots": ["./node_modules/@types/"], // Type file locations\n    "useUnknownInCatchVariables": true, // catch (err) {} is an "unknown" type instead of "any"\n    "useDefineForClassFields": true // Use more modern ECMA syntax\n  },\n\n  "include": ["./src"], // Files to include\n  "exclude": ["./bin", "node_modules"], // Files to exclude\n\n  "buildOptions": {\n    "assumeChangesOnlyAffectDirectDependencies": true, // Asume that a changed file will only have changes to files directly depending on it\n    "force": false, // Build projects that haven\'t had any changes\n    "incremental": false, // Writes a tsbuildinfo file for faster development\n    "traceResolution": false, // Log moduleResolution paths\n    "verbose": false // Log everything\n  },\n\n  "compileOnSave": true, // Compile code on save\n\n  "watchOptions": {\n    "excludeDirectories": ["node_modules"], // Exclude watch directories\n    "excludeFiles": [] // Exclude watch files\n  }\n}\n';
}
